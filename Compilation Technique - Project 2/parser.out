Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARROW

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statement
Rule 3     statements -> statement SEMICOLON
Rule 4     statements -> statement SEMICOLON statements
Rule 5     statement -> print_statement
Rule 6     statement -> cat_statement
Rule 7     statement -> assignment
Rule 8     statement -> expression
Rule 9     statement -> while_loop
Rule 10    statement -> if_block
Rule 11    print_statement -> PRINT LPAREN STRING RPAREN
Rule 12    cat_statement -> CAT LPAREN cat_arguments RPAREN
Rule 13    cat_arguments -> expression
Rule 14    cat_arguments -> expression COMMA cat_arguments
Rule 15    assignment -> ID ASSIGN expression
Rule 16    expression -> expression PLUS expression
Rule 17    expression -> expression DIVIDE expression
Rule 18    expression -> expression MOD expression
Rule 19    expression -> expression GT expression
Rule 20    expression -> expression LTE expression
Rule 21    expression -> expression NEQ expression
Rule 22    expression -> LPAREN expression RPAREN
Rule 23    expression -> NUMBER
Rule 24    expression -> STRING
Rule 25    expression -> ID
Rule 26    while_loop -> WHILE LPAREN expression RPAREN block
Rule 27    if_block -> IF LPAREN expression RPAREN block
Rule 28    if_block -> IF LPAREN expression RPAREN block ELSE block
Rule 29    block -> LCURLY statements RCURLY
Rule 30    block -> LCURLY RCURLY

Terminals, with rules where they appear

ARROW                : 
ASSIGN               : 15
CAT                  : 12
COMMA                : 14
DIVIDE               : 17
ELSE                 : 28
GT                   : 19
ID                   : 15 25
IF                   : 27 28
LCURLY               : 29 30
LPAREN               : 11 12 22 26 27 28
LTE                  : 20
MOD                  : 18
NEQ                  : 21
NUMBER               : 23
PLUS                 : 16
PRINT                : 11
RCURLY               : 29 30
RPAREN               : 11 12 22 26 27 28
SEMICOLON            : 3 4
STRING               : 11 24
WHILE                : 26
error                : 

Nonterminals, with rules where they appear

assignment           : 7
block                : 26 27 28 28
cat_arguments        : 12 14
cat_statement        : 6
expression           : 8 13 14 15 16 16 17 17 18 18 19 19 20 20 21 21 22 26 27 28
if_block             : 10
print_statement      : 5
program              : 0
statement            : 2 3 4
statements           : 1 4 29
while_loop           : 9

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statement
    (3) statements -> . statement SEMICOLON
    (4) statements -> . statement SEMICOLON statements
    (5) statement -> . print_statement
    (6) statement -> . cat_statement
    (7) statement -> . assignment
    (8) statement -> . expression
    (9) statement -> . while_loop
    (10) statement -> . if_block
    (11) print_statement -> . PRINT LPAREN STRING RPAREN
    (12) cat_statement -> . CAT LPAREN cat_arguments RPAREN
    (15) assignment -> . ID ASSIGN expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression GT expression
    (20) expression -> . expression LTE expression
    (21) expression -> . expression NEQ expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . NUMBER
    (24) expression -> . STRING
    (25) expression -> . ID
    (26) while_loop -> . WHILE LPAREN expression RPAREN block
    (27) if_block -> . IF LPAREN expression RPAREN block
    (28) if_block -> . IF LPAREN expression RPAREN block ELSE block

    PRINT           shift and go to state 10
    CAT             shift and go to state 13
    ID              shift and go to state 14
    LPAREN          shift and go to state 11
    NUMBER          shift and go to state 15
    STRING          shift and go to state 12
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    print_statement                shift and go to state 4
    cat_statement                  shift and go to state 5
    assignment                     shift and go to state 6
    expression                     shift and go to state 7
    while_loop                     shift and go to state 8
    if_block                       shift and go to state 9

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .

    $end            reduce using rule 1 (program -> statements .)


state 3

    (2) statements -> statement .
    (3) statements -> statement . SEMICOLON
    (4) statements -> statement . SEMICOLON statements

    $end            reduce using rule 2 (statements -> statement .)
    RCURLY          reduce using rule 2 (statements -> statement .)
    SEMICOLON       shift and go to state 18


state 4

    (5) statement -> print_statement .

    SEMICOLON       reduce using rule 5 (statement -> print_statement .)
    $end            reduce using rule 5 (statement -> print_statement .)
    RCURLY          reduce using rule 5 (statement -> print_statement .)


state 5

    (6) statement -> cat_statement .

    SEMICOLON       reduce using rule 6 (statement -> cat_statement .)
    $end            reduce using rule 6 (statement -> cat_statement .)
    RCURLY          reduce using rule 6 (statement -> cat_statement .)


state 6

    (7) statement -> assignment .

    SEMICOLON       reduce using rule 7 (statement -> assignment .)
    $end            reduce using rule 7 (statement -> assignment .)
    RCURLY          reduce using rule 7 (statement -> assignment .)


state 7

    (8) statement -> expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . GT expression
    (20) expression -> expression . LTE expression
    (21) expression -> expression . NEQ expression

    SEMICOLON       reduce using rule 8 (statement -> expression .)
    $end            reduce using rule 8 (statement -> expression .)
    RCURLY          reduce using rule 8 (statement -> expression .)
    PLUS            shift and go to state 19
    DIVIDE          shift and go to state 20
    MOD             shift and go to state 21
    GT              shift and go to state 22
    LTE             shift and go to state 23
    NEQ             shift and go to state 24


state 8

    (9) statement -> while_loop .

    SEMICOLON       reduce using rule 9 (statement -> while_loop .)
    $end            reduce using rule 9 (statement -> while_loop .)
    RCURLY          reduce using rule 9 (statement -> while_loop .)


state 9

    (10) statement -> if_block .

    SEMICOLON       reduce using rule 10 (statement -> if_block .)
    $end            reduce using rule 10 (statement -> if_block .)
    RCURLY          reduce using rule 10 (statement -> if_block .)


state 10

    (11) print_statement -> PRINT . LPAREN STRING RPAREN

    LPAREN          shift and go to state 25


state 11

    (22) expression -> LPAREN . expression RPAREN
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression GT expression
    (20) expression -> . expression LTE expression
    (21) expression -> . expression NEQ expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . NUMBER
    (24) expression -> . STRING
    (25) expression -> . ID

    LPAREN          shift and go to state 11
    NUMBER          shift and go to state 15
    STRING          shift and go to state 12
    ID              shift and go to state 27

    expression                     shift and go to state 26

state 12

    (24) expression -> STRING .

    PLUS            reduce using rule 24 (expression -> STRING .)
    DIVIDE          reduce using rule 24 (expression -> STRING .)
    MOD             reduce using rule 24 (expression -> STRING .)
    GT              reduce using rule 24 (expression -> STRING .)
    LTE             reduce using rule 24 (expression -> STRING .)
    NEQ             reduce using rule 24 (expression -> STRING .)
    SEMICOLON       reduce using rule 24 (expression -> STRING .)
    $end            reduce using rule 24 (expression -> STRING .)
    RPAREN          reduce using rule 24 (expression -> STRING .)
    RCURLY          reduce using rule 24 (expression -> STRING .)
    COMMA           reduce using rule 24 (expression -> STRING .)


state 13

    (12) cat_statement -> CAT . LPAREN cat_arguments RPAREN

    LPAREN          shift and go to state 28


state 14

    (15) assignment -> ID . ASSIGN expression
    (25) expression -> ID .

    ASSIGN          shift and go to state 29
    PLUS            reduce using rule 25 (expression -> ID .)
    DIVIDE          reduce using rule 25 (expression -> ID .)
    MOD             reduce using rule 25 (expression -> ID .)
    GT              reduce using rule 25 (expression -> ID .)
    LTE             reduce using rule 25 (expression -> ID .)
    NEQ             reduce using rule 25 (expression -> ID .)
    SEMICOLON       reduce using rule 25 (expression -> ID .)
    $end            reduce using rule 25 (expression -> ID .)
    RCURLY          reduce using rule 25 (expression -> ID .)


state 15

    (23) expression -> NUMBER .

    PLUS            reduce using rule 23 (expression -> NUMBER .)
    DIVIDE          reduce using rule 23 (expression -> NUMBER .)
    MOD             reduce using rule 23 (expression -> NUMBER .)
    GT              reduce using rule 23 (expression -> NUMBER .)
    LTE             reduce using rule 23 (expression -> NUMBER .)
    NEQ             reduce using rule 23 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 23 (expression -> NUMBER .)
    $end            reduce using rule 23 (expression -> NUMBER .)
    RPAREN          reduce using rule 23 (expression -> NUMBER .)
    RCURLY          reduce using rule 23 (expression -> NUMBER .)
    COMMA           reduce using rule 23 (expression -> NUMBER .)


state 16

    (26) while_loop -> WHILE . LPAREN expression RPAREN block

    LPAREN          shift and go to state 30


state 17

    (27) if_block -> IF . LPAREN expression RPAREN block
    (28) if_block -> IF . LPAREN expression RPAREN block ELSE block

    LPAREN          shift and go to state 31


state 18

    (3) statements -> statement SEMICOLON .
    (4) statements -> statement SEMICOLON . statements
    (2) statements -> . statement
    (3) statements -> . statement SEMICOLON
    (4) statements -> . statement SEMICOLON statements
    (5) statement -> . print_statement
    (6) statement -> . cat_statement
    (7) statement -> . assignment
    (8) statement -> . expression
    (9) statement -> . while_loop
    (10) statement -> . if_block
    (11) print_statement -> . PRINT LPAREN STRING RPAREN
    (12) cat_statement -> . CAT LPAREN cat_arguments RPAREN
    (15) assignment -> . ID ASSIGN expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression GT expression
    (20) expression -> . expression LTE expression
    (21) expression -> . expression NEQ expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . NUMBER
    (24) expression -> . STRING
    (25) expression -> . ID
    (26) while_loop -> . WHILE LPAREN expression RPAREN block
    (27) if_block -> . IF LPAREN expression RPAREN block
    (28) if_block -> . IF LPAREN expression RPAREN block ELSE block

    $end            reduce using rule 3 (statements -> statement SEMICOLON .)
    RCURLY          reduce using rule 3 (statements -> statement SEMICOLON .)
    PRINT           shift and go to state 10
    CAT             shift and go to state 13
    ID              shift and go to state 14
    LPAREN          shift and go to state 11
    NUMBER          shift and go to state 15
    STRING          shift and go to state 12
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    statement                      shift and go to state 3
    statements                     shift and go to state 32
    print_statement                shift and go to state 4
    cat_statement                  shift and go to state 5
    assignment                     shift and go to state 6
    expression                     shift and go to state 7
    while_loop                     shift and go to state 8
    if_block                       shift and go to state 9

state 19

    (16) expression -> expression PLUS . expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression GT expression
    (20) expression -> . expression LTE expression
    (21) expression -> . expression NEQ expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . NUMBER
    (24) expression -> . STRING
    (25) expression -> . ID

    LPAREN          shift and go to state 11
    NUMBER          shift and go to state 15
    STRING          shift and go to state 12
    ID              shift and go to state 27

    expression                     shift and go to state 33

state 20

    (17) expression -> expression DIVIDE . expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression GT expression
    (20) expression -> . expression LTE expression
    (21) expression -> . expression NEQ expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . NUMBER
    (24) expression -> . STRING
    (25) expression -> . ID

    LPAREN          shift and go to state 11
    NUMBER          shift and go to state 15
    STRING          shift and go to state 12
    ID              shift and go to state 27

    expression                     shift and go to state 34

state 21

    (18) expression -> expression MOD . expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression GT expression
    (20) expression -> . expression LTE expression
    (21) expression -> . expression NEQ expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . NUMBER
    (24) expression -> . STRING
    (25) expression -> . ID

    LPAREN          shift and go to state 11
    NUMBER          shift and go to state 15
    STRING          shift and go to state 12
    ID              shift and go to state 27

    expression                     shift and go to state 35

state 22

    (19) expression -> expression GT . expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression GT expression
    (20) expression -> . expression LTE expression
    (21) expression -> . expression NEQ expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . NUMBER
    (24) expression -> . STRING
    (25) expression -> . ID

    LPAREN          shift and go to state 11
    NUMBER          shift and go to state 15
    STRING          shift and go to state 12
    ID              shift and go to state 27

    expression                     shift and go to state 36

state 23

    (20) expression -> expression LTE . expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression GT expression
    (20) expression -> . expression LTE expression
    (21) expression -> . expression NEQ expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . NUMBER
    (24) expression -> . STRING
    (25) expression -> . ID

    LPAREN          shift and go to state 11
    NUMBER          shift and go to state 15
    STRING          shift and go to state 12
    ID              shift and go to state 27

    expression                     shift and go to state 37

state 24

    (21) expression -> expression NEQ . expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression GT expression
    (20) expression -> . expression LTE expression
    (21) expression -> . expression NEQ expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . NUMBER
    (24) expression -> . STRING
    (25) expression -> . ID

    LPAREN          shift and go to state 11
    NUMBER          shift and go to state 15
    STRING          shift and go to state 12
    ID              shift and go to state 27

    expression                     shift and go to state 38

state 25

    (11) print_statement -> PRINT LPAREN . STRING RPAREN

    STRING          shift and go to state 39


state 26

    (22) expression -> LPAREN expression . RPAREN
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . GT expression
    (20) expression -> expression . LTE expression
    (21) expression -> expression . NEQ expression

    RPAREN          shift and go to state 40
    PLUS            shift and go to state 19
    DIVIDE          shift and go to state 20
    MOD             shift and go to state 21
    GT              shift and go to state 22
    LTE             shift and go to state 23
    NEQ             shift and go to state 24


state 27

    (25) expression -> ID .

    RPAREN          reduce using rule 25 (expression -> ID .)
    PLUS            reduce using rule 25 (expression -> ID .)
    DIVIDE          reduce using rule 25 (expression -> ID .)
    MOD             reduce using rule 25 (expression -> ID .)
    GT              reduce using rule 25 (expression -> ID .)
    LTE             reduce using rule 25 (expression -> ID .)
    NEQ             reduce using rule 25 (expression -> ID .)
    SEMICOLON       reduce using rule 25 (expression -> ID .)
    $end            reduce using rule 25 (expression -> ID .)
    RCURLY          reduce using rule 25 (expression -> ID .)
    COMMA           reduce using rule 25 (expression -> ID .)


state 28

    (12) cat_statement -> CAT LPAREN . cat_arguments RPAREN
    (13) cat_arguments -> . expression
    (14) cat_arguments -> . expression COMMA cat_arguments
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression GT expression
    (20) expression -> . expression LTE expression
    (21) expression -> . expression NEQ expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . NUMBER
    (24) expression -> . STRING
    (25) expression -> . ID

    LPAREN          shift and go to state 11
    NUMBER          shift and go to state 15
    STRING          shift and go to state 12
    ID              shift and go to state 27

    cat_arguments                  shift and go to state 41
    expression                     shift and go to state 42

state 29

    (15) assignment -> ID ASSIGN . expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression GT expression
    (20) expression -> . expression LTE expression
    (21) expression -> . expression NEQ expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . NUMBER
    (24) expression -> . STRING
    (25) expression -> . ID

    LPAREN          shift and go to state 11
    NUMBER          shift and go to state 15
    STRING          shift and go to state 12
    ID              shift and go to state 27

    expression                     shift and go to state 43

state 30

    (26) while_loop -> WHILE LPAREN . expression RPAREN block
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression GT expression
    (20) expression -> . expression LTE expression
    (21) expression -> . expression NEQ expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . NUMBER
    (24) expression -> . STRING
    (25) expression -> . ID

    LPAREN          shift and go to state 11
    NUMBER          shift and go to state 15
    STRING          shift and go to state 12
    ID              shift and go to state 27

    expression                     shift and go to state 44

state 31

    (27) if_block -> IF LPAREN . expression RPAREN block
    (28) if_block -> IF LPAREN . expression RPAREN block ELSE block
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression GT expression
    (20) expression -> . expression LTE expression
    (21) expression -> . expression NEQ expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . NUMBER
    (24) expression -> . STRING
    (25) expression -> . ID

    LPAREN          shift and go to state 11
    NUMBER          shift and go to state 15
    STRING          shift and go to state 12
    ID              shift and go to state 27

    expression                     shift and go to state 45

state 32

    (4) statements -> statement SEMICOLON statements .

    $end            reduce using rule 4 (statements -> statement SEMICOLON statements .)
    RCURLY          reduce using rule 4 (statements -> statement SEMICOLON statements .)


state 33

    (16) expression -> expression PLUS expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . GT expression
    (20) expression -> expression . LTE expression
    (21) expression -> expression . NEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
    SEMICOLON       reduce using rule 16 (expression -> expression PLUS expression .)
    $end            reduce using rule 16 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 16 (expression -> expression PLUS expression .)
    RCURLY          reduce using rule 16 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 16 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 19
    DIVIDE          shift and go to state 20
    MOD             shift and go to state 21
    GT              shift and go to state 22
    LTE             shift and go to state 23
    NEQ             shift and go to state 24

  ! PLUS            [ reduce using rule 16 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 16 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 16 (expression -> expression PLUS expression .) ]
  ! GT              [ reduce using rule 16 (expression -> expression PLUS expression .) ]
  ! LTE             [ reduce using rule 16 (expression -> expression PLUS expression .) ]
  ! NEQ             [ reduce using rule 16 (expression -> expression PLUS expression .) ]


state 34

    (17) expression -> expression DIVIDE expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . GT expression
    (20) expression -> expression . LTE expression
    (21) expression -> expression . NEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
    SEMICOLON       reduce using rule 17 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 17 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 17 (expression -> expression DIVIDE expression .)
    RCURLY          reduce using rule 17 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 17 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 19
    DIVIDE          shift and go to state 20
    MOD             shift and go to state 21
    GT              shift and go to state 22
    LTE             shift and go to state 23
    NEQ             shift and go to state 24

  ! PLUS            [ reduce using rule 17 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 17 (expression -> expression DIVIDE expression .) ]
  ! MOD             [ reduce using rule 17 (expression -> expression DIVIDE expression .) ]
  ! GT              [ reduce using rule 17 (expression -> expression DIVIDE expression .) ]
  ! LTE             [ reduce using rule 17 (expression -> expression DIVIDE expression .) ]
  ! NEQ             [ reduce using rule 17 (expression -> expression DIVIDE expression .) ]


state 35

    (18) expression -> expression MOD expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . GT expression
    (20) expression -> expression . LTE expression
    (21) expression -> expression . NEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
    SEMICOLON       reduce using rule 18 (expression -> expression MOD expression .)
    $end            reduce using rule 18 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 18 (expression -> expression MOD expression .)
    RCURLY          reduce using rule 18 (expression -> expression MOD expression .)
    COMMA           reduce using rule 18 (expression -> expression MOD expression .)
    PLUS            shift and go to state 19
    DIVIDE          shift and go to state 20
    MOD             shift and go to state 21
    GT              shift and go to state 22
    LTE             shift and go to state 23
    NEQ             shift and go to state 24

  ! PLUS            [ reduce using rule 18 (expression -> expression MOD expression .) ]
  ! DIVIDE          [ reduce using rule 18 (expression -> expression MOD expression .) ]
  ! MOD             [ reduce using rule 18 (expression -> expression MOD expression .) ]
  ! GT              [ reduce using rule 18 (expression -> expression MOD expression .) ]
  ! LTE             [ reduce using rule 18 (expression -> expression MOD expression .) ]
  ! NEQ             [ reduce using rule 18 (expression -> expression MOD expression .) ]


state 36

    (19) expression -> expression GT expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . GT expression
    (20) expression -> expression . LTE expression
    (21) expression -> expression . NEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
    SEMICOLON       reduce using rule 19 (expression -> expression GT expression .)
    $end            reduce using rule 19 (expression -> expression GT expression .)
    RPAREN          reduce using rule 19 (expression -> expression GT expression .)
    RCURLY          reduce using rule 19 (expression -> expression GT expression .)
    COMMA           reduce using rule 19 (expression -> expression GT expression .)
    PLUS            shift and go to state 19
    DIVIDE          shift and go to state 20
    MOD             shift and go to state 21
    GT              shift and go to state 22
    LTE             shift and go to state 23
    NEQ             shift and go to state 24

  ! PLUS            [ reduce using rule 19 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 19 (expression -> expression GT expression .) ]
  ! MOD             [ reduce using rule 19 (expression -> expression GT expression .) ]
  ! GT              [ reduce using rule 19 (expression -> expression GT expression .) ]
  ! LTE             [ reduce using rule 19 (expression -> expression GT expression .) ]
  ! NEQ             [ reduce using rule 19 (expression -> expression GT expression .) ]


state 37

    (20) expression -> expression LTE expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . GT expression
    (20) expression -> expression . LTE expression
    (21) expression -> expression . NEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
    SEMICOLON       reduce using rule 20 (expression -> expression LTE expression .)
    $end            reduce using rule 20 (expression -> expression LTE expression .)
    RPAREN          reduce using rule 20 (expression -> expression LTE expression .)
    RCURLY          reduce using rule 20 (expression -> expression LTE expression .)
    COMMA           reduce using rule 20 (expression -> expression LTE expression .)
    PLUS            shift and go to state 19
    DIVIDE          shift and go to state 20
    MOD             shift and go to state 21
    GT              shift and go to state 22
    LTE             shift and go to state 23
    NEQ             shift and go to state 24

  ! PLUS            [ reduce using rule 20 (expression -> expression LTE expression .) ]
  ! DIVIDE          [ reduce using rule 20 (expression -> expression LTE expression .) ]
  ! MOD             [ reduce using rule 20 (expression -> expression LTE expression .) ]
  ! GT              [ reduce using rule 20 (expression -> expression LTE expression .) ]
  ! LTE             [ reduce using rule 20 (expression -> expression LTE expression .) ]
  ! NEQ             [ reduce using rule 20 (expression -> expression LTE expression .) ]


state 38

    (21) expression -> expression NEQ expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . GT expression
    (20) expression -> expression . LTE expression
    (21) expression -> expression . NEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
    SEMICOLON       reduce using rule 21 (expression -> expression NEQ expression .)
    $end            reduce using rule 21 (expression -> expression NEQ expression .)
    RPAREN          reduce using rule 21 (expression -> expression NEQ expression .)
    RCURLY          reduce using rule 21 (expression -> expression NEQ expression .)
    COMMA           reduce using rule 21 (expression -> expression NEQ expression .)
    PLUS            shift and go to state 19
    DIVIDE          shift and go to state 20
    MOD             shift and go to state 21
    GT              shift and go to state 22
    LTE             shift and go to state 23
    NEQ             shift and go to state 24

  ! PLUS            [ reduce using rule 21 (expression -> expression NEQ expression .) ]
  ! DIVIDE          [ reduce using rule 21 (expression -> expression NEQ expression .) ]
  ! MOD             [ reduce using rule 21 (expression -> expression NEQ expression .) ]
  ! GT              [ reduce using rule 21 (expression -> expression NEQ expression .) ]
  ! LTE             [ reduce using rule 21 (expression -> expression NEQ expression .) ]
  ! NEQ             [ reduce using rule 21 (expression -> expression NEQ expression .) ]


state 39

    (11) print_statement -> PRINT LPAREN STRING . RPAREN

    RPAREN          shift and go to state 46


state 40

    (22) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    LTE             reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    RCURLY          reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 22 (expression -> LPAREN expression RPAREN .)


state 41

    (12) cat_statement -> CAT LPAREN cat_arguments . RPAREN

    RPAREN          shift and go to state 47


state 42

    (13) cat_arguments -> expression .
    (14) cat_arguments -> expression . COMMA cat_arguments
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . GT expression
    (20) expression -> expression . LTE expression
    (21) expression -> expression . NEQ expression

    RPAREN          reduce using rule 13 (cat_arguments -> expression .)
    COMMA           shift and go to state 48
    PLUS            shift and go to state 19
    DIVIDE          shift and go to state 20
    MOD             shift and go to state 21
    GT              shift and go to state 22
    LTE             shift and go to state 23
    NEQ             shift and go to state 24


state 43

    (15) assignment -> ID ASSIGN expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . GT expression
    (20) expression -> expression . LTE expression
    (21) expression -> expression . NEQ expression

    SEMICOLON       reduce using rule 15 (assignment -> ID ASSIGN expression .)
    $end            reduce using rule 15 (assignment -> ID ASSIGN expression .)
    RCURLY          reduce using rule 15 (assignment -> ID ASSIGN expression .)
    PLUS            shift and go to state 19
    DIVIDE          shift and go to state 20
    MOD             shift and go to state 21
    GT              shift and go to state 22
    LTE             shift and go to state 23
    NEQ             shift and go to state 24


state 44

    (26) while_loop -> WHILE LPAREN expression . RPAREN block
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . GT expression
    (20) expression -> expression . LTE expression
    (21) expression -> expression . NEQ expression

    RPAREN          shift and go to state 49
    PLUS            shift and go to state 19
    DIVIDE          shift and go to state 20
    MOD             shift and go to state 21
    GT              shift and go to state 22
    LTE             shift and go to state 23
    NEQ             shift and go to state 24


state 45

    (27) if_block -> IF LPAREN expression . RPAREN block
    (28) if_block -> IF LPAREN expression . RPAREN block ELSE block
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . GT expression
    (20) expression -> expression . LTE expression
    (21) expression -> expression . NEQ expression

    RPAREN          shift and go to state 50
    PLUS            shift and go to state 19
    DIVIDE          shift and go to state 20
    MOD             shift and go to state 21
    GT              shift and go to state 22
    LTE             shift and go to state 23
    NEQ             shift and go to state 24


state 46

    (11) print_statement -> PRINT LPAREN STRING RPAREN .

    SEMICOLON       reduce using rule 11 (print_statement -> PRINT LPAREN STRING RPAREN .)
    $end            reduce using rule 11 (print_statement -> PRINT LPAREN STRING RPAREN .)
    RCURLY          reduce using rule 11 (print_statement -> PRINT LPAREN STRING RPAREN .)


state 47

    (12) cat_statement -> CAT LPAREN cat_arguments RPAREN .

    SEMICOLON       reduce using rule 12 (cat_statement -> CAT LPAREN cat_arguments RPAREN .)
    $end            reduce using rule 12 (cat_statement -> CAT LPAREN cat_arguments RPAREN .)
    RCURLY          reduce using rule 12 (cat_statement -> CAT LPAREN cat_arguments RPAREN .)


state 48

    (14) cat_arguments -> expression COMMA . cat_arguments
    (13) cat_arguments -> . expression
    (14) cat_arguments -> . expression COMMA cat_arguments
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression GT expression
    (20) expression -> . expression LTE expression
    (21) expression -> . expression NEQ expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . NUMBER
    (24) expression -> . STRING
    (25) expression -> . ID

    LPAREN          shift and go to state 11
    NUMBER          shift and go to state 15
    STRING          shift and go to state 12
    ID              shift and go to state 27

    expression                     shift and go to state 42
    cat_arguments                  shift and go to state 51

state 49

    (26) while_loop -> WHILE LPAREN expression RPAREN . block
    (29) block -> . LCURLY statements RCURLY
    (30) block -> . LCURLY RCURLY

    LCURLY          shift and go to state 53

    block                          shift and go to state 52

state 50

    (27) if_block -> IF LPAREN expression RPAREN . block
    (28) if_block -> IF LPAREN expression RPAREN . block ELSE block
    (29) block -> . LCURLY statements RCURLY
    (30) block -> . LCURLY RCURLY

    LCURLY          shift and go to state 53

    block                          shift and go to state 54

state 51

    (14) cat_arguments -> expression COMMA cat_arguments .

    RPAREN          reduce using rule 14 (cat_arguments -> expression COMMA cat_arguments .)


state 52

    (26) while_loop -> WHILE LPAREN expression RPAREN block .

    SEMICOLON       reduce using rule 26 (while_loop -> WHILE LPAREN expression RPAREN block .)
    $end            reduce using rule 26 (while_loop -> WHILE LPAREN expression RPAREN block .)
    RCURLY          reduce using rule 26 (while_loop -> WHILE LPAREN expression RPAREN block .)


state 53

    (29) block -> LCURLY . statements RCURLY
    (30) block -> LCURLY . RCURLY
    (2) statements -> . statement
    (3) statements -> . statement SEMICOLON
    (4) statements -> . statement SEMICOLON statements
    (5) statement -> . print_statement
    (6) statement -> . cat_statement
    (7) statement -> . assignment
    (8) statement -> . expression
    (9) statement -> . while_loop
    (10) statement -> . if_block
    (11) print_statement -> . PRINT LPAREN STRING RPAREN
    (12) cat_statement -> . CAT LPAREN cat_arguments RPAREN
    (15) assignment -> . ID ASSIGN expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression GT expression
    (20) expression -> . expression LTE expression
    (21) expression -> . expression NEQ expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . NUMBER
    (24) expression -> . STRING
    (25) expression -> . ID
    (26) while_loop -> . WHILE LPAREN expression RPAREN block
    (27) if_block -> . IF LPAREN expression RPAREN block
    (28) if_block -> . IF LPAREN expression RPAREN block ELSE block

    RCURLY          shift and go to state 56
    PRINT           shift and go to state 10
    CAT             shift and go to state 13
    ID              shift and go to state 14
    LPAREN          shift and go to state 11
    NUMBER          shift and go to state 15
    STRING          shift and go to state 12
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    statements                     shift and go to state 55
    statement                      shift and go to state 3
    print_statement                shift and go to state 4
    cat_statement                  shift and go to state 5
    assignment                     shift and go to state 6
    expression                     shift and go to state 7
    while_loop                     shift and go to state 8
    if_block                       shift and go to state 9

state 54

    (27) if_block -> IF LPAREN expression RPAREN block .
    (28) if_block -> IF LPAREN expression RPAREN block . ELSE block

    SEMICOLON       reduce using rule 27 (if_block -> IF LPAREN expression RPAREN block .)
    $end            reduce using rule 27 (if_block -> IF LPAREN expression RPAREN block .)
    RCURLY          reduce using rule 27 (if_block -> IF LPAREN expression RPAREN block .)
    ELSE            shift and go to state 57


state 55

    (29) block -> LCURLY statements . RCURLY

    RCURLY          shift and go to state 58


state 56

    (30) block -> LCURLY RCURLY .

    SEMICOLON       reduce using rule 30 (block -> LCURLY RCURLY .)
    $end            reduce using rule 30 (block -> LCURLY RCURLY .)
    RCURLY          reduce using rule 30 (block -> LCURLY RCURLY .)
    ELSE            reduce using rule 30 (block -> LCURLY RCURLY .)


state 57

    (28) if_block -> IF LPAREN expression RPAREN block ELSE . block
    (29) block -> . LCURLY statements RCURLY
    (30) block -> . LCURLY RCURLY

    LCURLY          shift and go to state 53

    block                          shift and go to state 59

state 58

    (29) block -> LCURLY statements RCURLY .

    SEMICOLON       reduce using rule 29 (block -> LCURLY statements RCURLY .)
    $end            reduce using rule 29 (block -> LCURLY statements RCURLY .)
    RCURLY          reduce using rule 29 (block -> LCURLY statements RCURLY .)
    ELSE            reduce using rule 29 (block -> LCURLY statements RCURLY .)


state 59

    (28) if_block -> IF LPAREN expression RPAREN block ELSE block .

    SEMICOLON       reduce using rule 28 (if_block -> IF LPAREN expression RPAREN block ELSE block .)
    $end            reduce using rule 28 (if_block -> IF LPAREN expression RPAREN block ELSE block .)
    RCURLY          reduce using rule 28 (if_block -> IF LPAREN expression RPAREN block ELSE block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 33 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 33 resolved as shift
WARNING: shift/reduce conflict for MOD in state 33 resolved as shift
WARNING: shift/reduce conflict for GT in state 33 resolved as shift
WARNING: shift/reduce conflict for LTE in state 33 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 33 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 34 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 34 resolved as shift
WARNING: shift/reduce conflict for MOD in state 34 resolved as shift
WARNING: shift/reduce conflict for GT in state 34 resolved as shift
WARNING: shift/reduce conflict for LTE in state 34 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 34 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 35 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 35 resolved as shift
WARNING: shift/reduce conflict for MOD in state 35 resolved as shift
WARNING: shift/reduce conflict for GT in state 35 resolved as shift
WARNING: shift/reduce conflict for LTE in state 35 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 35 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 36 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 36 resolved as shift
WARNING: shift/reduce conflict for MOD in state 36 resolved as shift
WARNING: shift/reduce conflict for GT in state 36 resolved as shift
WARNING: shift/reduce conflict for LTE in state 36 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 36 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 37 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 37 resolved as shift
WARNING: shift/reduce conflict for MOD in state 37 resolved as shift
WARNING: shift/reduce conflict for GT in state 37 resolved as shift
WARNING: shift/reduce conflict for LTE in state 37 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 37 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 38 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 38 resolved as shift
WARNING: shift/reduce conflict for MOD in state 38 resolved as shift
WARNING: shift/reduce conflict for GT in state 38 resolved as shift
WARNING: shift/reduce conflict for LTE in state 38 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 38 resolved as shift
