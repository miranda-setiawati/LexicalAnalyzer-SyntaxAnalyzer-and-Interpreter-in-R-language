
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARROW ASSIGN CAT COMMA DIVIDE ELSE GT ID IF LCURLY LPAREN LTE MOD NEQ NUMBER PLUS PRINT RCURLY RPAREN SEMICOLON STRING WHILEprogram : statementsstatements : statement\n                  | statement SEMICOLON\n                  | statement SEMICOLON statementsstatement : print_statement\n                 | cat_statement\n                 | assignment\n                 | expression\n                 | while_loop\n                 | if_blockprint_statement : PRINT LPAREN STRING RPARENcat_statement : CAT LPAREN cat_arguments RPARENcat_arguments : expression\n                     | expression COMMA cat_argumentsassignment : ID ASSIGN expressionexpression : expression PLUS expression\n                  | expression DIVIDE expression\n                  | expression MOD expression\n                  | expression GT expression\n                  | expression LTE expression\n                  | expression NEQ expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : STRINGexpression : IDwhile_loop : WHILE LPAREN expression RPAREN blockif_block : IF LPAREN expression RPAREN block\n                | IF LPAREN expression RPAREN block ELSE blockblock : LCURLY statements RCURLY\n             | LCURLY RCURLY'
    
_lr_action_items = {'PRINT':([0,18,53,],[10,10,10,]),'CAT':([0,18,53,],[13,13,13,]),'ID':([0,11,18,19,20,21,22,23,24,28,29,30,31,48,53,],[14,27,14,27,27,27,27,27,27,27,27,27,27,27,14,]),'LPAREN':([0,10,11,13,16,17,18,19,20,21,22,23,24,28,29,30,31,48,53,],[11,25,11,28,30,31,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'NUMBER':([0,11,18,19,20,21,22,23,24,28,29,30,31,48,53,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'STRING':([0,11,18,19,20,21,22,23,24,25,28,29,30,31,48,53,],[12,12,12,12,12,12,12,12,12,39,12,12,12,12,12,12,]),'WHILE':([0,18,53,],[16,16,16,]),'IF':([0,18,53,],[17,17,17,]),'$end':([1,2,3,4,5,6,7,8,9,12,14,15,18,27,32,33,34,35,36,37,38,40,43,46,47,52,54,56,58,59,],[0,-1,-2,-5,-6,-7,-8,-9,-10,-24,-25,-23,-3,-25,-4,-16,-17,-18,-19,-20,-21,-22,-15,-11,-12,-26,-27,-30,-29,-28,]),'RCURLY':([3,4,5,6,7,8,9,12,14,15,18,27,32,33,34,35,36,37,38,40,43,46,47,52,53,54,55,56,58,59,],[-2,-5,-6,-7,-8,-9,-10,-24,-25,-23,-3,-25,-4,-16,-17,-18,-19,-20,-21,-22,-15,-11,-12,-26,56,-27,58,-30,-29,-28,]),'SEMICOLON':([3,4,5,6,7,8,9,12,14,15,27,33,34,35,36,37,38,40,43,46,47,52,54,56,58,59,],[18,-5,-6,-7,-8,-9,-10,-24,-25,-23,-25,-16,-17,-18,-19,-20,-21,-22,-15,-11,-12,-26,-27,-30,-29,-28,]),'PLUS':([7,12,14,15,26,27,33,34,35,36,37,38,40,42,43,44,45,],[19,-24,-25,-23,19,-25,19,19,19,19,19,19,-22,19,19,19,19,]),'DIVIDE':([7,12,14,15,26,27,33,34,35,36,37,38,40,42,43,44,45,],[20,-24,-25,-23,20,-25,20,20,20,20,20,20,-22,20,20,20,20,]),'MOD':([7,12,14,15,26,27,33,34,35,36,37,38,40,42,43,44,45,],[21,-24,-25,-23,21,-25,21,21,21,21,21,21,-22,21,21,21,21,]),'GT':([7,12,14,15,26,27,33,34,35,36,37,38,40,42,43,44,45,],[22,-24,-25,-23,22,-25,22,22,22,22,22,22,-22,22,22,22,22,]),'LTE':([7,12,14,15,26,27,33,34,35,36,37,38,40,42,43,44,45,],[23,-24,-25,-23,23,-25,23,23,23,23,23,23,-22,23,23,23,23,]),'NEQ':([7,12,14,15,26,27,33,34,35,36,37,38,40,42,43,44,45,],[24,-24,-25,-23,24,-25,24,24,24,24,24,24,-22,24,24,24,24,]),'RPAREN':([12,15,26,27,33,34,35,36,37,38,39,40,41,42,44,45,51,],[-24,-23,40,-25,-16,-17,-18,-19,-20,-21,46,-22,47,-13,49,50,-14,]),'COMMA':([12,15,27,33,34,35,36,37,38,40,42,],[-24,-23,-25,-16,-17,-18,-19,-20,-21,-22,48,]),'ASSIGN':([14,],[29,]),'LCURLY':([49,50,57,],[53,53,53,]),'ELSE':([54,56,58,],[57,-30,-29,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,18,53,],[2,32,55,]),'statement':([0,18,53,],[3,3,3,]),'print_statement':([0,18,53,],[4,4,4,]),'cat_statement':([0,18,53,],[5,5,5,]),'assignment':([0,18,53,],[6,6,6,]),'expression':([0,11,18,19,20,21,22,23,24,28,29,30,31,48,53,],[7,26,7,33,34,35,36,37,38,42,43,44,45,42,7,]),'while_loop':([0,18,53,],[8,8,8,]),'if_block':([0,18,53,],[9,9,9,]),'cat_arguments':([28,48,],[41,51,]),'block':([49,50,57,],[52,54,59,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','syntax_analyzer.py',6),
  ('statements -> statement','statements',1,'p_statements','syntax_analyzer.py',11),
  ('statements -> statement SEMICOLON','statements',2,'p_statements','syntax_analyzer.py',12),
  ('statements -> statement SEMICOLON statements','statements',3,'p_statements','syntax_analyzer.py',13),
  ('statement -> print_statement','statement',1,'p_statement','syntax_analyzer.py',23),
  ('statement -> cat_statement','statement',1,'p_statement','syntax_analyzer.py',24),
  ('statement -> assignment','statement',1,'p_statement','syntax_analyzer.py',25),
  ('statement -> expression','statement',1,'p_statement','syntax_analyzer.py',26),
  ('statement -> while_loop','statement',1,'p_statement','syntax_analyzer.py',27),
  ('statement -> if_block','statement',1,'p_statement','syntax_analyzer.py',28),
  ('print_statement -> PRINT LPAREN STRING RPAREN','print_statement',4,'p_print_statement','syntax_analyzer.py',33),
  ('cat_statement -> CAT LPAREN cat_arguments RPAREN','cat_statement',4,'p_cat_statement','syntax_analyzer.py',38),
  ('cat_arguments -> expression','cat_arguments',1,'p_cat_arguments','syntax_analyzer.py',43),
  ('cat_arguments -> expression COMMA cat_arguments','cat_arguments',3,'p_cat_arguments','syntax_analyzer.py',44),
  ('assignment -> ID ASSIGN expression','assignment',3,'p_assignment','syntax_analyzer.py',52),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','syntax_analyzer.py',57),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','syntax_analyzer.py',58),
  ('expression -> expression MOD expression','expression',3,'p_expression_binop','syntax_analyzer.py',59),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','syntax_analyzer.py',60),
  ('expression -> expression LTE expression','expression',3,'p_expression_binop','syntax_analyzer.py',61),
  ('expression -> expression NEQ expression','expression',3,'p_expression_binop','syntax_analyzer.py',62),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','syntax_analyzer.py',66),
  ('expression -> NUMBER','expression',1,'p_expression_number','syntax_analyzer.py',70),
  ('expression -> STRING','expression',1,'p_expression_string','syntax_analyzer.py',74),
  ('expression -> ID','expression',1,'p_expression_id','syntax_analyzer.py',78),
  ('while_loop -> WHILE LPAREN expression RPAREN block','while_loop',5,'p_while_loop','syntax_analyzer.py',83),
  ('if_block -> IF LPAREN expression RPAREN block','if_block',5,'p_if_block','syntax_analyzer.py',88),
  ('if_block -> IF LPAREN expression RPAREN block ELSE block','if_block',7,'p_if_block','syntax_analyzer.py',89),
  ('block -> LCURLY statements RCURLY','block',3,'p_block','syntax_analyzer.py',97),
  ('block -> LCURLY RCURLY','block',2,'p_block','syntax_analyzer.py',98),
]
